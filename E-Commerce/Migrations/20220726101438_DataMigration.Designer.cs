// <auto-generated />
using System;
using E_Commerce.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_Commerce.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220726101438_DataMigration")]
    partial class DataMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("E_Commerce.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 36, 850, DateTimeKind.Local).AddTicks(3742),
                            Email = "email1@gmail.com",
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 36, 850, DateTimeKind.Local).AddTicks(4238),
                            Password = "$2a$11$DAcPcRn4NSQz2CjtDpmfFuPeeLKVJnAxnhYxj7kfZ922eyR4UDRj2",
                            RoleId = 1L,
                            UserId = 1L,
                            Username = "account1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 71, DateTimeKind.Local).AddTicks(8430),
                            Email = "email2@gmail.com",
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 71, DateTimeKind.Local).AddTicks(8431),
                            Password = "$2a$11$93Vo78iq53DbSZ2PqxMNb.vLEseScXrJhxC727wNco0aPTwEqZyMa",
                            RoleId = 2L,
                            UserId = 2L,
                            Username = "account2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 290, DateTimeKind.Local).AddTicks(3953),
                            Email = "email3@gmail.com",
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 290, DateTimeKind.Local).AddTicks(3955),
                            Password = "$2a$11$HXPFJVtmEbgIlwcQDEAuguouqLC8lsz6BeSolfWBqrDUBDtFsCjdi",
                            RoleId = 3L,
                            UserId = 3L,
                            Username = "account3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 535, DateTimeKind.Local).AddTicks(513),
                            Email = "email4@gmail.com",
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 535, DateTimeKind.Local).AddTicks(514),
                            Password = "$2a$11$wMk1UqgqEwT0PyqCuQQ05uu93Te.LmHhWrO1q29hCzUX4LcBQk6L6",
                            RoleId = 4L,
                            UserId = 4L,
                            Username = "account4"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("E_Commerce.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("E_Commerce.Models.CartProduct", b =>
                {
                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductDetailProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductDetailProductVarianceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductDetailSizeId")
                        .HasColumnType("bigint");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductDetailProductId", "ProductDetailProductVarianceId", "ProductDetailSizeId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("E_Commerce.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Gender")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("E_Commerce.Models.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("E_Commerce.Models.DiscountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscountType");
                });

            modelBuilder.Entity("E_Commerce.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("E_Commerce.Models.OptionRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OptionRole");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8021),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8024),
                            Name = "Get"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8028),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8028),
                            Name = "Post"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8030),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8031),
                            Name = "Put"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8033),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8034),
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("double");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SubTotal")
                        .HasColumnType("double");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<long?>("VoucherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("E_Commerce.Models.Organizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Organizer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "address",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4850),
                            Detail = "detail",
                            Email = "email@gmail.com",
                            IsCompany = true,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4851),
                            Name = "name",
                            Phone = "0000000001",
                            Photo = "photo",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "address",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(7150),
                            Detail = "detail",
                            Email = "email2@gmail.com",
                            IsCompany = false,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(7151),
                            Name = "name",
                            Phone = "0000000002",
                            Photo = "photo",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Address = "address",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(7155),
                            Detail = "detail",
                            Email = "email3@gmail.com",
                            IsCompany = false,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(7156),
                            Name = "name",
                            Phone = "0000000003",
                            Photo = "photo",
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Address = "address",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(7159),
                            Detail = "detail",
                            Email = "email4@gmail.com",
                            IsCompany = true,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(7159),
                            Name = "name",
                            Phone = "0000000004",
                            Photo = "photo",
                            UserId = 4L
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Permission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("RoleId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            OptionId = 1L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8595),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(8950)
                        },
                        new
                        {
                            RoleId = 1L,
                            OptionId = 2L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(116),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(119)
                        },
                        new
                        {
                            RoleId = 1L,
                            OptionId = 3L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(120),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(121)
                        },
                        new
                        {
                            RoleId = 1L,
                            OptionId = 4L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(122),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(123)
                        },
                        new
                        {
                            RoleId = 2L,
                            OptionId = 1L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(124),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(125)
                        },
                        new
                        {
                            RoleId = 2L,
                            OptionId = 2L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(126),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 751, DateTimeKind.Local).AddTicks(126)
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("E_Commerce.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("ProductBrand");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AddBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsParent")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductDetail", b =>
                {
                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductVarianceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SizeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId", "ProductVarianceId", "SizeId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductVarianceId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductVariance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariance");
                });

            modelBuilder.Entity("E_Commerce.Models.Receiver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("E_Commerce.Models.ReviewProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrganizerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductVarianceId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double>("Rating")
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVarianceId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewProduct");
                });

            modelBuilder.Entity("E_Commerce.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(287),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(288),
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(740),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(741),
                            Name = "shop-owner"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(743),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(744),
                            Name = "manager"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(746),
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(747),
                            Name = "staff"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Size", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SizeCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SizeCategoryId");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("E_Commerce.Models.SizeCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("OrganizerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("SizeCategories");
                });

            modelBuilder.Entity("E_Commerce.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrganizerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 1L,
                            Avatar = "photo.png",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(1483),
                            FullName = "User 1",
                            Gender = 1,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(1484),
                            OrganizerId = 1L,
                            Phone = "0000000001"
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 2L,
                            Avatar = "photo.png",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4089),
                            FullName = "User 2",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4090),
                            OrganizerId = 2L,
                            Phone = "0000000002"
                        },
                        new
                        {
                            Id = 3L,
                            AccountId = 3L,
                            Avatar = "photo.png",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4094),
                            FullName = "User 3",
                            Gender = 0,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4094),
                            OrganizerId = 3L,
                            Phone = "0000000003"
                        },
                        new
                        {
                            Id = 4L,
                            AccountId = 4L,
                            Avatar = "photo.png",
                            CreatedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4097),
                            FullName = "User 4",
                            Gender = 1,
                            LastModifiedAt = new DateTime(2022, 7, 26, 17, 14, 37, 750, DateTimeKind.Local).AddTicks(4098),
                            OrganizerId = 4L,
                            Phone = "0000000004"
                        });
                });

            modelBuilder.Entity("E_Commerce.Models.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrganizerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("E_Commerce.Models.VoucherType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VoucherType");
                });

            modelBuilder.Entity("E_Commerce.Models.Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("E_Commerce.Models.Wishlist_Product", b =>
                {
                    b.Property<long?>("WishlistId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("WishlistId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Wishlist_Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Account", b =>
                {
                    b.HasOne("E_Commerce.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("E_Commerce.Models.Account", "UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Models.Cart", b =>
                {
                    b.HasOne("E_Commerce.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", null)
                        .WithMany("Carts")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce.Models.CartProduct", b =>
                {
                    b.HasOne("E_Commerce.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.ProductDetail", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductDetailProductId", "ProductDetailProductVarianceId", "ProductDetailSizeId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Discount", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("Discounts")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.DiscountType", "DiscountType")
                        .WithMany("Discounts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountType");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("E_Commerce.Models.Order", b =>
                {
                    b.HasOne("E_Commerce.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Receiver", "Receiver")
                        .WithMany("Orders")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Receiver");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("E_Commerce.Models.Organizer", b =>
                {
                    b.HasOne("E_Commerce.Models.User", "User")
                        .WithOne("Organizer")
                        .HasForeignKey("E_Commerce.Models.Organizer", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Models.Permission", b =>
                {
                    b.HasOne("E_Commerce.Models.OptionRole", "Option")
                        .WithMany("Option_roles")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Role", "Role")
                        .WithMany("Option_roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("E_Commerce.Models.Photo", b =>
                {
                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Product", b =>
                {
                    b.HasOne("E_Commerce.Models.ProductBrand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Discount", null)
                        .WithMany("Products")
                        .HasForeignKey("DiscountId");

                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("Products")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductBrand", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("Brands")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductCategory", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("ProductCategories")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductDetail", b =>
                {
                    b.HasOne("E_Commerce.Models.Discount", "Discount")
                        .WithMany("ProductDetails")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.ProductVariance", "ProductVariance")
                        .WithMany("Details")
                        .HasForeignKey("ProductVarianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Size", "ProductSize")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");

                    b.Navigation("ProductSize");

                    b.Navigation("ProductVariance");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductVariance", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("ProductVariances")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany("Variances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Models.Receiver", b =>
                {
                    b.HasOne("E_Commerce.Models.Customer", "Customer")
                        .WithMany("Receivers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce.Models.ReviewProduct", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("Reviews")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.ProductVariance", "ProductVariance")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductVarianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Product");

                    b.Navigation("ProductVariance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Models.Size", b =>
                {
                    b.HasOne("E_Commerce.Models.SizeCategory", "SizeCategory")
                        .WithMany("Sizes")
                        .HasForeignKey("SizeCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("SizeCategory");
                });

            modelBuilder.Entity("E_Commerce.Models.SizeCategory", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("E_Commerce.Models.Voucher", b =>
                {
                    b.HasOne("E_Commerce.Models.Organizer", "Organizer")
                        .WithMany("Vouchers")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.VoucherType", "Type")
                        .WithMany("Vouchers")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("E_Commerce.Models.Wishlist", b =>
                {
                    b.HasOne("E_Commerce.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Models.Wishlist_Product", b =>
                {
                    b.HasOne("E_Commerce.Models.Product", "Product")
                        .WithMany("Wishlist_Products")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Wishlist", "Wishlist")
                        .WithMany("Wishlist_Products")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("E_Commerce.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("E_Commerce.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("E_Commerce.Models.Discount", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Models.DiscountType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("E_Commerce.Models.OptionRole", b =>
                {
                    b.Navigation("Option_roles");
                });

            modelBuilder.Entity("E_Commerce.Models.Organizer", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Discounts");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");

                    b.Navigation("ProductVariances");

                    b.Navigation("Reviews");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("E_Commerce.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Carts");

                    b.Navigation("Photos");

                    b.Navigation("ProductDetails");

                    b.Navigation("Reviews");

                    b.Navigation("Variances");

                    b.Navigation("Wishlist_Products");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductDetail", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("E_Commerce.Models.ProductVariance", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("E_Commerce.Models.Receiver", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Commerce.Models.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Option_roles");
                });

            modelBuilder.Entity("E_Commerce.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("E_Commerce.Models.SizeCategory", b =>
                {
                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("E_Commerce.Models.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Organizer")
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("E_Commerce.Models.Voucher", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Commerce.Models.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("E_Commerce.Models.Wishlist", b =>
                {
                    b.Navigation("Wishlist_Products");
                });
#pragma warning restore 612, 618
        }
    }
}
